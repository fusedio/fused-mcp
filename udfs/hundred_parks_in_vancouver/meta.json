{"job_config":{"name":null,"steps":[{"type":"udf","name":null,"metadata":null,"ignore_chunk_error":false,"udf":{"name":"hundred_parks_in_vancouver","type":"geopandas_v2","headers":[],"metadata":{"fused:mcp":{"description":"\nName: parks_vancouver\nPurpose and Functionality:\nThe UDF 'parks_vancouver' is designed to extract and format the geographical and geometrical data related to parks in Vancouver. It fetches the data from the Open Data Portal of the city of Vancouver and further structures it in a geo-referenced format suitable for subsequent spatial analysis or visualization tasks. The function operates by facilitating HTTP requests, performing data extraction, geometry creation, data formatting, and providing results as a GeoDataFrame. \n\nInput Parameters:\n\nThe function doesn't require any explicit input parameters from the user. Internal parameters such as the 'limit' and 'parks_url' variables are already set within the function. The 'limit' parameter controls the maximum number of entries the function fetches from the Open Data Portal with a current preset value of 100. The 'parks_url' parameter is set to the API endpoint of the Vancouver parks dataset.\nOutput:\nThe output of this UDF is a GeoDataFrame, a spatial variant of a pandas DataFrame from the GeoPandas library. This output contains the data about parks and related geometric entities with their characteristics included as column entries. This includes the park's area (in hectares), centroid coordinates, buffer radius, and geometric representation as shapely Polygon or MultiPolygon objects.\n\nTechnical Details and Limitations:\nThe function makes HTTP requests to external APIs, therefore its functionality depends on the availability and continuity of those APIs. It also operates under the assumption that the data from the APIs follow a particular JSON structure. The script will fail to function properly if the web service changes its data structure or ceases to exist. To raise exceptions for HTTP errors and continue the function execution, it uses the 'raise_for_status()' method from the requests library.\nFurthermore, the function also uses the Shapely library to generate geometric shapes from the data. Any inconsistencies or errors in the data may lead to exceptions during this process, but these are handled and printed via a try-except block. Finally, the output GeoDataFrame's 'buffer_radius' column is computed using the assumption that the park areas are circular, which may not always be accurate for irregularly shaped parks.","parameters":[{"name":"","type":""}]},"fused:slug":"hundred_parks_in_vancouver","fused:name":"hundred_parks_in_vancouver"},"table_schema":null,"entrypoint":"parks_vancouver","cache_max_age":null,"parameters":{},"original_headers":"","source":"hundred_parks_in_vancouver.py"},"input":null}],"metadata":null}}