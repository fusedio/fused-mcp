{"job_config":{"name":null,"steps":[{"type":"udf","name":null,"metadata":null,"ignore_chunk_error":false,"udf":{"name":"dynamic_output_vector_udf","type":"geopandas_v2","headers":[],"metadata":{"fused:mcp":{"description":"\n        This UDF takes in primary function is to take a specified kind of data, process it according to the chosen 'kind', and produce various types of outputs. These outputs range from a Geospatial DataFrame (gdf) to specific kinds of table views like a pivot_table, geoJSON data, or even a PDF report.\n        The 'kind' parameter is of primary interest for this UDF. It accepts a string from a list of predefined inputs, [\"data\", \"mapshaper\", \"geojson_io\", \"placemark\", \"pivot_table\", \"duckdb_shell\", \"pydeck_geojson\", \"pydeck_vector_tile\", \"pdf\"]. The chosen 'kind' subsequently determines the course of processing for the input data. It manipulates the data by invoking other defined functions such as: mapshaper, geojson_io, placemark, pivot_table, duckdb_shell, pydeck_geojson, pydeck_vector_tile, and pdf. \n        If the 'kind' selected is 'data', the UDF uses the 'UDF_Overture_Maps_Example' to produce a Geospatial DataFrame (gdf) with fields such as \"id\", \"height\", \"roof_color\", \"roof_height\", and \"geometry\". The 'area' field is then calculated from the 'geometry' field. The gdf is then printed to the console and returned as the output\n        For other 'kind' parameters, such as 'mapshaper', 'geojson_io', 'placemark', 'pivot_table', 'duckdb_shell', 'pydeck_geojson', 'pydeck_vector_tile', and 'pdf', the UDF retrieves and processes the data from a fused.run(shared_token, kind=\"data\") call. The shared_token, although is hardcoded into the UDF for now, represents a token that allows data sharing between multiple fused.run calls\n        The output is contingent on the 'kind' parameter. For example, 'pydeck_vector_tile' returns a pydeck_vector_tile object created with a vector tile URL that includes the shared token. If 'kind' is 'pdf', it generates and returns a PDF, showing the transpose of the head of the data frame. In any other cases, the UDF generates an html_to_obj transformation of the processed data.\n        Remember that as the UDF has hard coded its token for data sharing, alterations to the function may have to address this aspect in case the data sharing model changes. This UDF works in a specific sequence and constellations of smaller functions, making it strongly coupled to the Fused UDF platform and its available functions and UDFs in its space. Future updates will likely focus on improving the flexibility of such coupling.","parameters":[{"name":"kind","type":"str"}]},"fused:slug":"dynamic_output_vector_udf","fused:name":"dynamic_output_vector_udf"},"table_schema":null,"entrypoint":"creating_urls_udf","cache_max_age":null,"parameters":{},"original_headers":"","source":"dynamic_output_vector_udf.py"},"input":null}],"metadata":null}}